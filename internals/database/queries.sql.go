// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package database

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO
    users (username, password, email)
values
    (?, ?, ?)
`

type CreateUserParams struct {
	Username string
	Password string
	Email    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Username, arg.Password, arg.Email)
	return err
}

const getEpisodeByUrl = `-- name: GetEpisodeByUrl :one
SELECT
    title,
    url,
    podcast_title,
    podcast_url,
    description,
    website,
    released,
    mygpo_link
FROM
    episodes
where
    url = ?
`

type GetEpisodeByUrlRow struct {
	Title        string
	Url          string
	PodcastTitle string
	PodcastUrl   string
	Description  string
	Website      string
	Released     time.Time
	MygpoLink    string
}

func (q *Queries) GetEpisodeByUrl(ctx context.Context, url string) (GetEpisodeByUrlRow, error) {
	row := q.db.QueryRowContext(ctx, getEpisodeByUrl, url)
	var i GetEpisodeByUrlRow
	err := row.Scan(
		&i.Title,
		&i.Url,
		&i.PodcastTitle,
		&i.PodcastUrl,
		&i.Description,
		&i.Website,
		&i.Released,
		&i.MygpoLink,
	)
	return i, err
}

const getPodcastByUrl = `-- name: GetPodcastByUrl :one
SELECT
    title,
    website,
    mygpo_link,
    description,
    subscribers,
    author,
    url,
    logo_url
FROM
    podcasts
where
    url = ?
`

type GetPodcastByUrlRow struct {
	Title       string
	Website     string
	MygpoLink   string
	Description string
	Subscribers int64
	Author      string
	Url         string
	LogoUrl     interface{}
}

func (q *Queries) GetPodcastByUrl(ctx context.Context, url string) (GetPodcastByUrlRow, error) {
	row := q.db.QueryRowContext(ctx, getPodcastByUrl, url)
	var i GetPodcastByUrlRow
	err := row.Scan(
		&i.Title,
		&i.Website,
		&i.MygpoLink,
		&i.Description,
		&i.Subscribers,
		&i.Author,
		&i.Url,
		&i.LogoUrl,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT
    id, username, password, email
FROM
    users
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT
    id, username, password, email
FROM
    users
WHERE
    username = ?
LIMIT
    1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
	)
	return i, err
}

const listTopTags = `-- name: ListTopTags :many
SELECT
    title,
    code,
    usage
FROM
    tags
ORDER BY
    usage DESC
LIMIT
    ?
`

type ListTopTagsRow struct {
	Title string
	Code  string
	Usage int64
}

func (q *Queries) ListTopTags(ctx context.Context, limit int64) ([]ListTopTagsRow, error) {
	rows, err := q.db.QueryContext(ctx, listTopTags, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTopTagsRow
	for rows.Next() {
		var i ListTopTagsRow
		if err := rows.Scan(&i.Title, &i.Code, &i.Usage); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userExists = `-- name: UserExists :one
SELECT
    count(*)
FROM
    users
WHERE
    username = ?
    OR email = ?
`

type UserExistsParams struct {
	Username string
	Email    string
}

func (q *Queries) UserExists(ctx context.Context, arg UserExistsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, userExists, arg.Username, arg.Email)
	var count int64
	err := row.Scan(&count)
	return count, err
}
