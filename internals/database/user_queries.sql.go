// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_queries.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (username, password, email) values (?,?,?)
`

type CreateUserParams struct {
	Username string
	Password string
	Email    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Username, arg.Password, arg.Email)
	return err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, password, email FROM users WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
	)
	return i, err
}

const userExists = `-- name: UserExists :one
SELECT count(*) FROM users WHERE username = ? OR email = ?
`

type UserExistsParams struct {
	Username string
	Email    string
}

func (q *Queries) UserExists(ctx context.Context, arg UserExistsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, userExists, arg.Username, arg.Email)
	var count int64
	err := row.Scan(&count)
	return count, err
}
